package magento

import (
	"fmt"

	"github.com/dghubble/oauth1"

	"github.com/ottemo/foundation/api"
	"github.com/ottemo/foundation/env"
	"github.com/ottemo/foundation/app"
	"github.com/ottemo/foundation/utils"
	"io/ioutil"
)

// setups package related API endpoint routines
func setupAPI() error {

	service := api.GetRestService()

	service.GET("impex/magento", restMagento)
	service.POST("impex/magento", restMagentoImport)

	return nil
}

// WEB REST API used to list available models for Impex system
func restMagento(context api.InterfaceApplicationContext) (interface{}, error) {
	//var result []string

	var host = utils.InterfaceToString(env.ConfigGetValue(app.ConstConfigPathFoundationURL))
	var baseURL = utils.InterfaceToString(env.ConfigGetValue(app.ConstConfigPathDashboardURL))

	var consumerKey = "2f026794738f4dcf5c2519da1025a085"
	var consumerSecret = "15d7850d214561e7f2431d9330c9171c"
	var siteUrl = "http://ee.test.taa.speroteck-dev.com"
	var siteAdminUrl = "http://ee.test.taa.speroteck-dev.com/admin"
	if host == "" {
		host = "http://localhost:3000"
	}
	if baseURL == "" {
		baseURL = "http://localhost:9000"
	}
	//conf := &oauth2.Config{
	//	ClientID:     "2f026794738f4dcf5c2519da1025a085",
	//	ClientSecret: "15d7850d214561e7f2431d9330c9171c",
	//	//Scopes:       []string{"SCOPE1", "SCOPE2"},
	//	Endpoint: oauth2.Endpoint{
	//		AuthURL:  "http://ee.test.taa.speroteck-dev.com/admin/oauth_authorize",
	//		TokenURL: "http://ee.test.taa.speroteck-dev.com/oauth/token",
	//	},
	//}
	fmt.Println("url  " + baseURL)
	fmt.Println("url  " + app.GetDashboardURL(baseURL + "/impex"))
	fmt.Println("url  " + app.GetDashboardURL("/impex"))
	config := oauth1.Config{
		ConsumerKey:    consumerKey,
		ConsumerSecret: consumerSecret,
		CallbackURL:    baseURL + "/impex",
		Endpoint:       oauth1.Endpoint{
			RequestTokenURL: siteUrl + "/oauth/initiate",
			AuthorizeURL:    siteAdminUrl + "/oauth_authorize",
			AccessTokenURL:  siteUrl + "/oauth/token",
		},
	}

	requestToken, requestSecret, err := config.RequestToken()
	if err != nil {
		fmt.Println(err)

		return "", err
	}

	fmt.Println("requestToken " + requestToken)
	fmt.Println("requestSecret " + requestSecret)


	authorizationURL, err := config.AuthorizationURL(requestToken)
	if err != nil {
		fmt.Println(err)
		return "", err
	}

	context.GetSession().Set(ConstSessionKeyMagentoRequestToken, requestToken)
	context.GetSession().Set(ConstSessionKeyMagentoRequestSecret, requestSecret)
	context.GetSession().Set(ConstSessionKeyMagentoConsumerKey, consumerKey)
	context.GetSession().Set(ConstSessionKeyMagentoRequestSecret, consumerSecret)
	context.GetSession().Set(ConstSessionKeyMagentoSiteAdminUrl, siteAdminUrl)
	context.GetSession().Set(ConstSessionKeyMagentoSiteUrl, siteUrl)

	return api.StructRestRedirect{
		Result:   "redirect",
		Location: authorizationURL.String(),
		DoRedirect: false,
	}, nil
}


func restMagentoImport(context api.InterfaceApplicationContext) (interface{}, error) {

	var host = utils.InterfaceToString(env.ConfigGetValue(app.ConstConfigPathFoundationURL))
	var baseURL = utils.InterfaceToString(env.ConfigGetValue(app.ConstConfigPathDashboardURL))

	if host == "" {
		host = "http://localhost:3000"
	}
	if baseURL == "" {
		baseURL = "http://localhost:9000"
	}

	// check request context
	//---------------------
	requestData, err := api.GetRequestContentAsMap(context)
	if err != nil {
		return nil, env.ErrorDispatch(err)
	}

	oauthToken := utils.InterfaceToString(requestData["oauthToken"])
	if oauthToken == "" {
		return nil, env.ErrorNew(ConstErrorModule, ConstErrorLevel, "6372b9a3-29f3-4ea4-a19f-40051a8f330b", "email was not specified")
	}

	oauthVerifier := utils.InterfaceToString(requestData["oauthVerifier"])
	if oauthVerifier == "" {
		return nil, env.ErrorNew(ConstErrorModule, ConstErrorLevel, "6372b9a3-29f3-4ea4-a19f-40051a8f330b", "email was not specified")
	}

	requestToken := utils.InterfaceToString(context.GetSession().Get(ConstSessionKeyMagentoRequestToken))
	requestSecret := utils.InterfaceToString(context.GetSession().Get(ConstSessionKeyMagentoRequestSecret))
	consumerKey := utils.InterfaceToString(context.GetSession().Get(ConstSessionKeyMagentoConsumerKey))
	consumerSecret := utils.InterfaceToString(context.GetSession().Get(ConstSessionKeyMagentoRequestSecret))
	//siteAdminUrl := utils.InterfaceToString(context.GetSession().Get(ConstSessionKeyMagentoSiteAdminUrl))
	siteUrl := utils.InterfaceToString(context.GetSession().Get(ConstSessionKeyMagentoSiteUrl))
	siteApiRestUrl := siteUrl + "/api/rest"


	//config := oauth1.Config{
	//	ConsumerKey:    consumerKey,
	//	ConsumerSecret: consumerSecret,
	//	CallbackURL:    baseURL + "/impex",
	//	Endpoint:       oauth1.Endpoint{
	//		RequestTokenURL: siteUrl + "/oauth/initiate",
	//		AuthorizeURL:    siteAdminUrl + "/oauth_authorize",
	//		AccessTokenURL:  siteUrl + "/oauth/token",
	//	},
	//}

	AccessTokenURL := siteUrl + "/oauth/token"
	config := oauth1.NewConfig(consumerKey, consumerSecret)
	config.Endpoint.AccessTokenURL = AccessTokenURL


	fmt.Println("requestToken " + requestToken)
	fmt.Println("requestSecret " + requestSecret)

	accessToken, accessSecret, err  := config.AccessToken(oauthToken, requestSecret, oauthVerifier)
	if err != nil {
		fmt.Println(err)
		return "", err
	}

	fmt.Println("accessToken " + accessToken)
	fmt.Println("accessSecret " + accessSecret)

	token := oauth1.NewToken(accessToken, accessSecret)
	// httpClient will automatically authorize http.Request's
	httpClient := config.Client(oauth1.NoContext, token)

	// get information about the current authenticated user
	path := siteApiRestUrl + "/customers"
	resp, _ := httpClient.Get(path)
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)
	fmt.Printf("Raw Response Body:\n%v\n", string(body))

	return nil, nil
}
