package magento

import (
	"fmt"
	"github.com/ottemo/foundation/api"
	"github.com/ottemo/foundation/utils"
	"github.com/ottemo/foundation/env"
)

// setups package related API endpoint routines
func setupAPI() error {

	service := api.GetRestService()

	service.POST("impex/magento/visitor", magentoVisitorRequest)
	service.POST("impex/magento/order", magentoOrderRequest)
	service.POST("impex/magento/category", magentoCategoryRequest)
	service.POST("impex/magento/product", magentoProductRequest)
	service.POST("impex/magento/stock", magentoStockRequest)
	//service.POST("impex/magento", restMagentoImport)

	return nil
}

func magentoVisitorRequest(context api.InterfaceApplicationContext) (interface{}, error) {
	fmt.Println("magentoVisitorRequest")
	fmt.Println(context)

	var result []string

	return result, nil
}

func magentoOrderRequest(context api.InterfaceApplicationContext) (interface{}, error) {
	fmt.Println("magentoOrderRequest")
	fmt.Println(context)

	var result []string

	return result, nil
}

func magentoCategoryRequest(context api.InterfaceApplicationContext) (interface{}, error) {
	fmt.Println("magentoCategoryRequest")
	fmt.Println(context)

	var result []string

	return result, nil
}

func magentoProductRequest(context api.InterfaceApplicationContext) (interface{}, error) {
	fmt.Println("magentoProductRequest")
	fmt.Println(context)
	fmt.Println(context.GetRequestFiles())
	requestData, err := api.GetRequestContentAsMap(context)
	if err != nil {
		return nil, env.ErrorDispatch(err)
	}
	fmt.Println(utils.InterfaceToString(requestData))
	for _, attachedFile := range context.GetRequestFiles() {
		//raw, err := ioutil.ReadFile(attachedFile)
		//if err != nil {
		//	fmt.Println(err.Error())
		//}
		fmt.Println(attachedFile)
		fmt.Println(utils.InterfaceToString(attachedFile))
	}
	var result []string

	return result, nil
}

func magentoStockRequest(context api.InterfaceApplicationContext) (interface{}, error) {
	fmt.Println("magentoStockRequest")
	fmt.Println(context)

	var result []string

	return result, nil
}

