FORMAT: 1A
HOST: http://foundation.demo.ottemo.io

# Ottemo Foundation Server API
#### Format 1A revision 1
**Ottemo Foundation Server** is the API Server for the Ottemo eCommerce solution.

NOTE: Some services are RESTful and others are not, expect change with each new release of Ottemo Foundation Server.


# Group Visitor API for use with Dashboard
A Visitor in Ottemo is any authenticated and unauthenticated web site visitor.  The following are the available resources of the **Visitor API** which might be called from the **Dashboard**.

## Create Visitor [/visitor/create]
### Create a new Visitor from Dashboard [POST]
+ Request (application/json)

        { "facebook_id":"","google_id":"","email":"jamesdoe@ottemo.io","fname":"James","lname":"Doe","password":"P@ssw0rd","billing_address":{},"shipping_address":{},"birthday":"02/12/1971" }

+ Response 201 (application/json)

        { "error":"","redirect":"","result":{"_id":"54751590a9fc9f132678c696","billing_address":null,"birthday":"1971-12-02T00:00:00Z","created_at":"2014-11-25T18:49:36.399279015-05:00","email":"jamesdoe@ottemo.io","facebook_id":"","first_name":"James","google_id":"","is_admin":false,"last_name":"Doe","password":"a78e27495e6dd8c7b7c9fa53e72c9df3","shipping_address":null,"validate":"415141414141374d42777951474169716a2f3755"} }


## Retrieve Visitor [/visitor/load/{id}]
### Get Visitor profile [GET]
+ Request (application/json)

        { "id":"54751590a9fc9f132678c747" }

+ Response 201

        { "error":"","redirect":"","result":{"_id":"54751590a9fc9f132678c747","billing_address":null,"birthday":"1991-12-02T00:00:00Z","created_at":"2014-11-25T18:49:36.399279015-05:00","email":"janedoe@ottemo.io","facebook_id":"","first_name":"Jane","google_id":"","is_admin":false,"last_name":"Doe","password":"a78e27495e6dd8c7b7c9fa53e72c9df3","shipping_address":null,"validate":"415141414141374d42777951474169716a2f3755"} }

## Update Visitor [/visitor/update]
### Update Visitor profile [PUT]
+ Request (application/json)

        { "id":"54751590a9fc9f132678c747","email":"janedoe@ottemo.io","fname":"Jane","lname":"Doe","birthday":"02/12/1991" }

+ Response 201

         { "error":"","redirect":"","result":{"_id":"54751590a9fc9f132678c747","billing_address":null,"birthday":"1991-12-02T00:00:00Z","created_at":"2014-11-25T18:49:36.399279015-05:00","email":"janedoe@ottemo.io","facebook_id":"","first_name":"Jane","google_id":"","is_admin":false,"last_name":"Doe","password":"a78e27495e6dd8c7b7c9fa53e72c9df3","shipping_address":null,"validate":"415141414141374d42777951474169716a2f3755"} }

## Update Visitor [/visitor/update/{id}]
### Update Visitor profile [PUT]
+ Request (application/json)

         { "id":"54751590a9fc9f132678c747","email":"janedoe@ottemo.io","fname":"Jane","lname":"Doe","birthday":"02/12/1991" }

+ Response 201

         { "error":"","redirect":"","result":{"_id":"54751590a9fc9f132678c747","billing_address":null,"birthday":"1991-12-02T00:00:00Z","created_at":"2014-11-25T18:49:36.399279015-05:00","email":"janedoe@ottemo.io","facebook_id":"","first_name":"Jane","google_id":"","is_admin":false,"last_name":"Doe","password":"a78e27495e6dd8c7b7c9fa53e72c9df3","shipping_address":null,"validate":"415141414141374d42777951474169716a2f3755"} }

## Delete Visitor [/visitor/delete/{id}]
### Purge Visitor from the database [DELETE]
+ Request (application/json)

         { "id":"54751590a9fc9f132678c747" }

+ Response 204

## Retrieve Visitors [/visitor/list]
### Retrieve Visitor list [GET]
+ Request (application/json)

        { "Update":"with sample JSON" }

+ Response 201

        { "Update":"with sample of JSON returned" }

## Count Visitors [/visitor/count]
### Retrieve current Visitor count [GET]
+ Request (application/json)

        { "Update":"with sample JSON" }

+ Response 201

        { "Update":"with sample of JSON returned" }

## Visitor Attributes [/visitor/attribute/list]
### Retrieve current Visitor attributes [GET]
+ Request (application/json)

        { "Update":"with sample JSON" }

+ Response 201

        { "Update":"with sample of JSON returned" }

## Add Visitor Attribute [/visitor/attribute/add]
### Retrieve Visitor list [POST]
+ Request (application/json)

        { "Update":"with sample JSON" }

+ Response 201

        { "Update":"with sample of JSON returned" }

## Delete Visitor Attribute [/visitor/delete/{attribute}]
### Remove Visitor Attribute from the database [DELETE]
+ Request (application/json)

         { "Update":"with sample JSON" }

+ Response 204

# Group Visitor API for use with Storefront
The following are the available resources of the **Visitor API** which may be called from the **Storefront**.

## Register Visitor [/visitor/register]
### Create a new Visitor from Storefront [POST]
+ Request (application/json)

        { "facebook_id":"","google_id":"","email":"jamesdoe@ottemo.io","fname":"James","lname":"Doe","password":"P@ssw0rd","billing_address":{},"shipping_address":{},"birthday":"02/12/1971" }

+ Response 201 (application/json)

        { "error":"","redirect":"","result":{"_id":"54751590a9fc9f132678c696","billing_address":null,"birthday":"1971-12-02T00:00:00Z","created_at":"2014-11-25T18:49:36.399279015-05:00","email":"jamesdoe@ottemo.io","facebook_id":"","first_name":"James","google_id":"","is_admin":false,"last_name":"Doe","password":"a78e27495e6dd8c7b7c9fa53e72c9df3","shipping_address":null,"validate":"415141414141374d42777951474169716a2f3755"} }


## Validate Visitor Key [/visitor/validate/{key}]
### Verify the current registration Key for the Visitor [GET]
+ Request (application/json)

        { "Update":"with sample JSON" }

+ Response 201

        { "Update":"with sample of JSON returned" }
        
## Invalidate Visitor Key [/visitor/invalidate/{email}]
### Invalidate the Registration Key and send new Regsitration Key using specified Email Address [GET]
+ Request (application/json)

        { "Update":"with sample JSON" }

+ Response 201

        { "Update":"with sample of JSON returned" }
        
## Password Reset [/visitor/forgot-password/{email}]
### Reset Visitor password using specified Email Address [GET]
+ Request (application/json)

        { "Update":"with sample JSON" }

+ Response 201

        { "Update":"with sample of JSON returned" }
        
## Get Visitor Profile [/visitor/info]
### Retrieve Visitor profile for current Visitor [GET]
+ Request (application/json)

        { "Update":"with sample JSON" }

+ Response 201

        { "Update":"with sample of JSON returned" }
        
## Logout [/visitor/logout]
### Log out the current Visitor [GET]
+ Request (application/json)

        { "Update":"with sample JSON" }

+ Response 201

        { "Update":"with sample of JSON returned" }
        
## Login [/visitor/login]
### Log in the current Visitor [POST]
+ Request (application/json)

        { "Update":"with sample JSON" }

+ Response 201

        { "Update":"with sample of JSON returned" }
     
## Facebook Registration/Login [/visitor/login-facebook]
### Associate the current Visitor with provided Facebook ID [POST]
+ Request (application/json)

        { "Update":"with sample JSON" }

+ Response 201

        { "Update":"with sample of JSON returned" }
        
## Google Registration/Login [/visitor/login-google]
### Associate the current Visitor with the provided Google ID [POST]
+ Request (application/json)

        { "Update":"with sample JSON" }

+ Response 201

        { "Update":"with sample of JSON returned" }
            
## Order List [/visitor/order/list]
### Retrieve the current Order for the specified Visitor [GET]
+ Request (application/json)

        { "Update":"with sample JSON" }

+ Response 201

        { "Update":"with sample of JSON returned" }
       
### Create a Visitor Order with the specified list [POST]
+ Request (application/json)

        { "Update":"with sample JSON" }

+ Response 201

        { "Update":"with sample of JSON returned" }
   
## Order Details [/visitor/order/details/{id}]
### Retrieve the Order details for the specified Visitor ID [GET]
+ Request (application/json)

        { "Update":"with sample JSON" }

+ Response 201

        { "Update":"with sample of JSON returned" }
              
## Send Email [/visitor/sendmail]
### Send email to the current Visitor [POST]
+ Request (application/json)

        { "Update":"with sample JSON" }

+ Response 201

        { "Update":"with sample of JSON returned" }

